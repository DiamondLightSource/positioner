#! Generated by VisualDCT v2.6
#! DBDSTART
#! DBD("../../dbd/positioner_vdct.dbd")
#! DBDEND


# % macro, __doc__, Template for controlling many positioner or
# it to be controlled by a multipositioner, mapping a list of names onto a
# list of motor positions
# % macro, P, Device prefix
# % macro, MP, Device suffix
# % macro, DESC, Multipositioner description
# % macro, STRA, String description for position 1
# % macro, STRB, String description for position 2
# % macro, STRC, String description for position 3
# % macro, STRD, String description for position 4
# % macro, STRE, String description for position 5
# % macro, STRF, String description for position 6
# % macro, STRG, String description for position 7
# % macro, STRH, String description for position 8
# % macro, STRI, String description for position 9
# % macro, STRJ, String description for position 10
# % macro, STRK, String description for position 11
# % macro, STRL, String description for position 12
# % macro, STRM, String description for position 13
# % macro, STRN, String description for position 14
# % macro, STRO, String description for position 15
# % macro, STRP, String description for position 16
# % macro, name, Object name and gui association name
# % macro, gda_name, If set, export to GDA with this name
# % macro, gda_desc, Description for GDA
# % macro, NPOS, Number of positioners, used to work out which screen to use.
# Only specify if not using the builder object.
# % macro, P1, Positioner 1 suffix for screen.
# Only specify if not using the builder object.
# % macro, P2, Positioner 2 suffix for screen.
# Only specify if not using the builder object.
# % macro, P3, Positioner 3 suffix for screen.
# Only specify if not using the builder object.
# % macro, P4, Positioner 4 suffix for screen.
# Only specify if not using the builder object.
# % macro, P5, Positioner 5 suffix for screen.
# Only specify if not using the builder object.
# % macro, P6, Positioner 6 suffix for screen.
# Only specify if not using the builder object.
# % macro, P7, Positioner 7 suffix for screen.
# Only specify if not using the builder object.
# % macro, P8, Positioner 8 suffix for screen.
# Only specify if not using the builder object.
# This associates an edm screen with the template
# % gui, $(name=), edmembed, pos-$(NPOS)pos.edl, P=$(P),MP=$(MP),filename=motor.edl,P1=$(P1),P2=$(P2),P3=$(P3),P4=$(P4),P5=$(P5),P6=$(P6),P7=$(P7),P8=$(P8)

# This associates a BOY screen with the template
# % gui, $(name=), boydetail, positionerApp_opi/positioner_detail.opi, P=$(P),MP=$(MP),DESC=$(DESC),desc=$(DESC),name=$(name),P1=$(P1),P2=$(P2),P3=$(P3),P4=$(P4),P5=$(P5),P6=$(P6),P7=$(P7),P8=$(P8)
# % gui, $(name=), boyembed, positionerApp_opi/positioner_embed_box.opi, P=$(P),MP=$(MP),DESC=$(DESC),desc=$(DESC),name=$(name),P1=$(P1),P2=$(P2),P3=$(P3),P4=$(P4),P5=$(P5),P6=$(P6),P7=$(P7),P8=$(P8)
# % gui, $(name=), boyembed, positionerApp_opi/positioner_embed.opi, P=$(P),MP=$(MP),DESC=$(DESC),desc=$(DESC),name=$(name),P1=$(P1),P2=$(P2),P3=$(P3),P4=$(P4),P5=$(P5),P6=$(P6),P7=$(P7),P8=$(P8)

# This provides the list of PVs to show on the details pane
# % gui, $(name=), demand, Name 1, <pv>.ZRST
# % gui, $(name=), demand, Name 2, <pv>.ONST
# % gui, $(name=), demand, Name 3, <pv>.TWST
# % gui, $(name=), demand, Name 4, <pv>.THST
# % gui, $(name=), demand, Name 5, <pv>.FRST
# % gui, $(name=), demand, Name 6, <pv>.FVST
# % gui, $(name=), demand, Name 7, <pv>.SXST
# % gui, $(name=), demand, Name 8, <pv>.SVST
# % gui, $(name=), demand, Name 9, <pv>.EIST
# % gui, $(name=), demand, Name 10, <pv>.NIST
# % gui, $(name=), demand, Name 11, <pv>.TEST
# % gui, $(name=), demand, Name 12, <pv>.ELST
# % gui, $(name=), demand, Name 13, <pv>.TVST
# % gui, $(name=), demand, Name 14, <pv>.TTST
# % gui, $(name=), demand, Name 15, <pv>.FTST
# % gui, $(name=), demand, Name 16, <pv>.FFST

# % gui, $(name=), demand, Value 1, $(P)$(P1):VALA
# % gui, $(name=), demand, Value 2, $(P)$(P1):VALB
# % gui, $(name=), demand, Value 3, $(P)$(P1):VALC
# % gui, $(name=), demand, Value 4, $(P)$(P1):VALD
# % gui, $(name=), demand, Value 5, $(P)$(P1):VALE
# % gui, $(name=), demand, Value 6, $(P)$(P1):VALF
# % gui, $(name=), demand, Value 7, $(P)$(P1):VALG
# % gui, $(name=), demand, Value 8, $(P)$(P1):VALH
# % gui, $(name=), demand, Value 9, $(P)$(P1):VALI
# % gui, $(name=), demand, Value 10, $(P)$(P1):VALJ
# % gui, $(name=), demand, Value 11, $(P)$(P1):VALK
# % gui, $(name=), demand, Value 12, $(P)$(P1):VALL
# % gui, $(name=), demand, Value 13, $(P)$(P1):VALM
# % gui, $(name=), demand, Value 14, $(P)$(P1):VALN
# % gui, $(name=), demand, Value 15, $(P)$(P1):VALO
# % gui, $(name=), demand, Value 16, $(P)$(P1):VALP

# This makes the component icon reflect the status and severity
# % gui, $(name=), status, <pv>.MOVN
# % gui, $(name=), sevr

# List of names for selection by user.
# Severity is returned via DISA.
# DISV set to 2 to stop disabling.
# % autosave 0 VAL
# % autosave 2 ZRST ONST TWST THST FRST FVST SXST SVST EIST NIST TEST ELST TVST TTST FTST FFST
# % gdatag,template,positioner,$(gda_name=),$(gda_desc=$(DESC))
# % gdatag,mbbinary,rw,$(gda_name=),SELECT,Position Selection
record(mbbo, "$(P)$(MP):SELECT") {
  field(DESC, "$(DESC)")
  field(SCAN, "Passive")
  field(DTYP, "Soft Channel")
  field(ZRST, "$(STRA=)")
  field(ONST, "$(STRB=)")
  field(TWST, "$(STRC=)")
  field(THST, "$(STRD=)")
  field(FRST, "$(STRE=)")
  field(FVST, "$(STRF=)")
  field(SXST, "$(STRG=)")
  field(FLNK, "$(P)$(MP):START PP MS")
  field(SVST, "$(STRH=)")
  field(EIST, "$(STRI=)")
  field(NIST, "$(STRJ=)")
  field(TEST, "$(STRK=)")
  field(ELST, "$(STRL=)")
  field(PINI, "YES")
  field(DISV, "2")
  field(VAL, "0")
  field(TVST, "$(STRM=)")
  field(TTST, "$(STRN=)")
  field(FTST, "$(STRO=)")
  field(FFST, "$(STRP=)")
}

# Open a gate on each positioner.
# The outlinks are filled by the positioners.
record(dfanout, "$(P)$(MP):SFANOUT") {
  field(DESC, "Fanout start motion")
  field(SELM, "All")
  field(VAL, "0")
}

# On selection make sure all gates are open before motion
record(fanout, "$(P)$(MP):FANOUT") {
  field(LNK1, "$(P)$(MP):SFANOUT PP MS")
  field(LNK2, "$(P)$(MP):DFANOUTA PP MS")
  field(DESC, "Fanout of processing")
}

# This PV is a good indication of severity
# % gui, $(name=), sevr
# Combined done moving indicator.
# Value from AND of all 8 possible inputs.
# The fixed values of 1 are overwritten by each positioner.
# % gdatag,pv,ro,$(gda_name=),DMOV,Done Moving Indicator
record(calcout, "$(P)$(MP):DMOV") {
  field(CALC, "A&B&C&D&E&F&G&H")
  field(A, "1")
  field(B, "1")
  field(C, "1")
  field(D, "1")
  field(E, "1")
  field(F, "1")
  field(G, "1")
  field(H, "1")
  field(DESC, "Positioner done moving")
  field(OUT, "$(P)$(MP):BUSY CA")
  field(OOPT, "Every Time")
  field(DOPT, "Use OCAL")
  field(OCAL, "(A&B&C&D&E&F&G&H)?0:1")
}

# Test opening of gates by waiting between open gate and move commands
# To use this change the FLNK of VALUE to point to this.
record(seq, "$(P)$(MP):FANOUT2") {
  field(DESC, "Wait before sending val")
  field(SCAN, "Passive")
  field(SELM, "All")
  field(DOL1, "0")
  field(LNK1, "$(P)$(MP):SFANOUT.PROC PP MS")
  field(DLY2, "5")
  field(LNK2, "$(P)$(MP):DFANOUTA.PROC PP MS")
}

#% gdatag,pv,ro,$(gda_name=),ERROR,Error Indicator,<pv>.K
record(transform, "$(P)$(MP):ERROR") {
  field(DESC, "Errors from positioners")
  field(FLNK, "$(P)$(MP):SETERROR1 PP MS")
  field(CLCI, "MAX(MAX(A,B),MAX(C,D))")
  field(CLCJ, "MAX(MAX(E,F),MAX(G,H))")
  field(CLCK, "MAX(I,J)")
  field(INPA, "0")
  field(INPB, "0")
  field(INPC, "0")
  field(INPD, "0")
  field(INPE, "0")
  field(INPF, "0")
  field(INPG, "0")
  field(INPH, "0")
}

# Check if value has changed from previous call.
# This stops infinite loops when passing MS back
record(calcout, "$(P)$(MP):GATE") {
  field(DESC, "Stop repeated output")
  field(DTYP, "Soft Channel")
  field(CALC, "(A#B)||((~C)&D)")
  field(INPA, "$(P)$(MP):SELECT NPP MS")
  field(INPB, "$(P)$(MP):VALUE")
  field(OUT, "$(P)$(MP):VALUE PP MS")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OCAL, "A")
  field(INPC, "$(P)$(MP):INPOS")
  field(INPD, "$(P)$(MP):DMOV")
}

# Stores last selected value. This enables the gate record to check if the value has changed.
# Initially set to -1 to ensure first value is selected correctly.
record(longout, "$(P)$(MP):VALUE") {
  field(DESC, "Value selected")
  field(DTYP, "Soft Channel")
  field(FLNK, "$(P)$(MP):FANOUT")
  field(VAL, "-1")
}

# Add 1 to selection to allow 1st seq to work
record(calc, "$(P)$(MP):SELECT1") {
  field(DESC, "Selection+1")
  field(CALC, "A+1")
  field(INPA, "$(P)$(MP):SELECT.VAL")
}

# Sets error severities for 2nd 6 positions
record(seq, "$(P)$(MP):SETERROR2") {
  field(DESC, "Sets errors in SELECT")
  field(SELM, "Specified")
  field(SELL, "$(P)$(MP):SELECT2.VAL PP")
  field(DOL1, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK1, "$(P)$(MP):SELECT.EISV PP MS")
  field(DOL2, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK2, "$(P)$(MP):SELECT.NISV PP MS")
  field(DOL3, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK3, "$(P)$(MP):SELECT.TESV PP MS")
  field(DOL4, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK4, "$(P)$(MP):SELECT.ELSV PP MS")
  field(DOL5, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK5, "$(P)$(MP):SELECT.TVSV PP MS")
  field(DOL6, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK6, "$(P)$(MP):SELECT.TTSV PP MS")
  field(DOL7, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK7, "$(P)$(MP):SELECT.FTSV PP MS")
  field(DOL8, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK8, "$(P)$(MP):SELECT.FFSV PP MS")
}

# Select the correct link from the second sequence
record(calc, "$(P)$(MP):SELECT2") {
  field(DESC, "Selection-7")
  field(CALC, "A-7")
  field(INPA, "$(P)$(MP):SELECT.VAL")
}

# Sets error severities for 1st 6 positions
record(seq, "$(P)$(MP):SETERROR1") {
  field(DESC, "Sets errors in SELECT")
  field(FLNK, "$(P)$(MP):SETERROR2")
  field(SELM, "Specified")
  field(SELL, "$(P)$(MP):SELECT1 PP")
  field(DOL1, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK1, "$(P)$(MP):SELECT.ZRSV PP MS")
  field(DOL2, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK2, "$(P)$(MP):SELECT.ONSV PP MS")
  field(DOL3, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK3, "$(P)$(MP):SELECT.TWSV PP MS")
  field(DOL4, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK4, "$(P)$(MP):SELECT.THSV PP MS")
  field(DOL5, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK5, "$(P)$(MP):SELECT.FRSV PP MS")
  field(DOL6, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK6, "$(P)$(MP):SELECT.FVSV PP MS")
  field(DOL7, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK7, "$(P)$(MP):SELECT.SXSV PP MS")
  field(DOL8, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK8, "$(P)$(MP):SELECT.SVSV PP MS")
}

# Stores types of underlying positioners
# 0 = Undefined
# 1 = Normal
# 2 = Motor
record(calcout, "$(P)$(MP):TYPE") {
  field(CALC, "A&B&C&D&E&F&G&H")
  field(A, "0")
  field(B, "0")
  field(C, "0")
  field(D, "0")
  field(E, "0")
  field(F, "0")
  field(G, "0")
  field(H, "0")
  field(DESC, "Types of positioner")
}

# Record to allow EDM to process changes of strings.
record(bo, "$(P)$(MP):UPDATE") {
  field(DESC, "Dummy for EDM")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(VAL, "1")
  field(ZNAM, "Updating")
  field(ONAM, "Normal")
}

# Combined in position indicator.
# Value from AND of all 8 possible inputs.
# The fixed values of 1 are overwritten by each positioner.
#% gdatag,pv,ro,$(gda_name=),INPOS,In Position Indicator
record(calcout, "$(P)$(MP):INPOS") {
  field(CALC, "A&B&C&D&E&F&G&H")
  field(A, "1")
  field(B, "1")
  field(C, "1")
  field(D, "1")
  field(E, "1")
  field(F, "1")
  field(G, "1")
  field(H, "1")
  field(DESC, "Combined in position monitor")
}

#% gdatag,pv,rw,$(gda_name=),STOP,Stop Button,<pv>.PROC
record(dfanout, "$(P)$(MP):STOP") {
  field(DESC, "Stop all motors")
  field(VAL, "1")
  field(SELM, "All")
}

# This makes the component icon reflect the status
# % gui, $(name=), status
record(busy, "$(P)$(MP):BUSY") {
}

record(fanout, "$(P)$(MP):START") {
  field(LNK1, "$(P)$(MP):GATE PP MS")
  field(LNK2, "$(P)$(MP):BUSY")
  field(SDIS, "$(P)$(MP):ERRPROC PP")
}

# Fans selected position number to each separate controller
# The outlinks are filled by the positioners.
record(dfanout, "$(P)$(MP):DFANOUTA") {
  field(DESC, "Fanout selection")
  field(SELM, "All")
  field(DOL, "$(P)$(MP):VALUE.VAL")
  field(OMSL, "closed_loop")
}

record(calc, "$(P)$(MP):ERRPROC") {
  field(CALC, "A||B")
  field(INPA, "$(P)$(MP):SETERROR1.PACT")
  field(INPB, "$(P)$(MP):SETERROR2.PACT")
}

#! Further lines contain data used by VisualDCT
#! View(1455,1332,1.0)
#! Record("$(P)$(MP):SELECT",1980,1704,0,0,"$(P)$(MP):SELECT")
#! Field("$(P)$(MP):SELECT.FLNK",16777215,1,"$(P)$(MP):SELECT.FLNK")
#! Link("$(P)$(MP):SELECT.FLNK","$(P)$(MP):START")
#! Field("$(P)$(MP):SELECT.ZRSV",16777215,0,"$(P)$(MP):SELECT.ZRSV")
#! Field("$(P)$(MP):SELECT.ONSV",16777215,0,"$(P)$(MP):SELECT.ONSV")
#! Field("$(P)$(MP):SELECT.TWSV",16777215,0,"$(P)$(MP):SELECT.TWSV")
#! Field("$(P)$(MP):SELECT.THSV",16777215,0,"$(P)$(MP):SELECT.THSV")
#! Field("$(P)$(MP):SELECT.FRSV",16777215,0,"$(P)$(MP):SELECT.FRSV")
#! Field("$(P)$(MP):SELECT.FVSV",16777215,0,"$(P)$(MP):SELECT.FVSV")
#! Field("$(P)$(MP):SELECT.SXSV",16777215,0,"$(P)$(MP):SELECT.SXSV")
#! Field("$(P)$(MP):SELECT.SVSV",16777215,0,"$(P)$(MP):SELECT.SVSV")
#! Field("$(P)$(MP):SELECT.VAL",16777215,1,"$(P)$(MP):SELECT.VAL")
#! Field("$(P)$(MP):SELECT.EISV",16777215,0,"$(P)$(MP):SELECT.EISV")
#! Field("$(P)$(MP):SELECT.NISV",16777215,0,"$(P)$(MP):SELECT.NISV")
#! Field("$(P)$(MP):SELECT.TESV",16777215,0,"$(P)$(MP):SELECT.TESV")
#! Field("$(P)$(MP):SELECT.ELSV",16777215,0,"$(P)$(MP):SELECT.ELSV")
#! Field("$(P)$(MP):SELECT.TVSV",16777215,0,"$(P)$(MP):SELECT.TVSV")
#! Field("$(P)$(MP):SELECT.TTSV",16777215,0,"$(P)$(MP):SELECT.TTSV")
#! Field("$(P)$(MP):SELECT.FTSV",16777215,0,"$(P)$(MP):SELECT.FTSV")
#! Field("$(P)$(MP):SELECT.FFSV",16777215,0,"$(P)$(MP):SELECT.FFSV")
#! Record("$(P)$(MP):SFANOUT",3340,1848,0,0,"$(P)$(MP):SFANOUT")
#! Field("$(P)$(MP):SFANOUT.PROC",16777215,0,"$(P)$(MP):SFANOUT.PROC")
#! Record("$(P)$(MP):FANOUT",3060,1788,0,0,"$(P)$(MP):FANOUT")
#! Field("$(P)$(MP):FANOUT.LNK1",16777215,1,"$(P)$(MP):FANOUT.LNK1")
#! Link("$(P)$(MP):FANOUT.LNK1","$(P)$(MP):SFANOUT")
#! Field("$(P)$(MP):FANOUT.LNK2",16777215,1,"$(P)$(MP):FANOUT.LNK2")
#! Link("$(P)$(MP):FANOUT.LNK2","$(P)$(MP):DFANOUTA")
#! Record("$(P)$(MP):DMOV",2240,2489,0,0,"$(P)$(MP):DMOV")
#! Field("$(P)$(MP):DMOV.VAL",16777215,1,"$(P)$(MP):DMOV.VAL")
#! Field("$(P)$(MP):DMOV.OUT",16777215,1,"$(P)$(MP):DMOV.OUT")
#! Link("$(P)$(MP):DMOV.OUT","$(P)$(MP):BUSY.VAL")
#! Record("$(P)$(MP):FANOUT2",3060,2026,0,0,"$(P)$(MP):FANOUT2")
#! Field("$(P)$(MP):FANOUT2.LNK1",16777215,1,"$(P)$(MP):FANOUT2.LNK1")
#! Link("$(P)$(MP):FANOUT2.LNK1","$(P)$(MP):SFANOUT.PROC")
#! Field("$(P)$(MP):FANOUT2.LNK2",16777215,1,"$(P)$(MP):FANOUT2.LNK2")
#! Link("$(P)$(MP):FANOUT2.LNK2","$(P)$(MP):DFANOUTA.PROC")
#! Record("$(P)$(MP):ERROR",780,1683,0,1,"$(P)$(MP):ERROR")
#! Field("$(P)$(MP):ERROR.FLNK",16777215,1,"$(P)$(MP):ERROR.FLNK")
#! Link("$(P)$(MP):ERROR.FLNK","$(P)$(MP):ERROR/FLNK")
#! Field("$(P)$(MP):ERROR.K",16777215,1,"$(P)$(MP):ERROR.K")
#! Connector("$(P)$(MP):ERROR/FLNK","$(P)$(MP):SETERROR1",1280,1851,16777215,"",0)
#! Record("$(P)$(MP):GATE",2520,2011,0,0,"$(P)$(MP):GATE")
#! Field("$(P)$(MP):GATE.INPA",16777215,0,"$(P)$(MP):GATE.INPA")
#! Link("$(P)$(MP):GATE.INPA","$(P)$(MP):SELECT.VAL")
#! Field("$(P)$(MP):GATE.INPB",16777215,1,"$(P)$(MP):GATE.INPB")
#! Link("$(P)$(MP):GATE.INPB","$(P)$(MP):VALUE.VAL")
#! Field("$(P)$(MP):GATE.OUT",16777215,1,"$(P)$(MP):GATE.OUT")
#! Link("$(P)$(MP):GATE.OUT","$(P)$(MP):VALUE.VAL")
#! Field("$(P)$(MP):GATE.INPC",16777215,1,"$(P)$(MP):GATE.INPC")
#! Link("$(P)$(MP):GATE.INPC","$(P)$(MP):INPOS.VAL")
#! Field("$(P)$(MP):GATE.INPD",16777215,0,"$(P)$(MP):GATE.INPD")
#! Link("$(P)$(MP):GATE.INPD","$(P)$(MP):DMOV.VAL")
#! Record("$(P)$(MP):VALUE",2800,2108,0,1,"$(P)$(MP):VALUE")
#! Field("$(P)$(MP):VALUE.FLNK",16777215,1,"$(P)$(MP):VALUE.FLNK")
#! Link("$(P)$(MP):VALUE.FLNK","$(P)$(MP):FANOUT")
#! Field("$(P)$(MP):VALUE.VAL",16777215,1,"$(P)$(MP):VALUE.VAL")
#! Record("$(P)$(MP):SELECT1",1500,2282,0,1,"$(P)$(MP):SELECT1")
#! Field("$(P)$(MP):SELECT1.VAL",16777215,1,"$(P)$(MP):SELECT1.VAL")
#! Field("$(P)$(MP):SELECT1.INPA",16777215,1,"$(P)$(MP):SELECT1.INPA")
#! Link("$(P)$(MP):SELECT1.INPA","$(P)$(MP):SELECT1/INPA")
#! Connector("$(P)$(MP):SELECT1/INPA","$(P)$(MP):SELECT.VAL",1760,2340,16777215,"",0)
#! Record("$(P)$(MP):SETERROR2",1060,2120,0,0,"$(P)$(MP):SETERROR2")
#! Field("$(P)$(MP):SETERROR2.SELL",16777215,1,"$(P)$(MP):SETERROR2.SELL")
#! Link("$(P)$(MP):SETERROR2.SELL","$(P)$(MP):SELECT2.VAL")
#! Field("$(P)$(MP):SETERROR2.DOL1",16777215,0,"$(P)$(MP):SETERROR2.DOL1")
#! Link("$(P)$(MP):SETERROR2.DOL1","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR2.DOL2",16777215,0,"$(P)$(MP):SETERROR2.DOL2")
#! Link("$(P)$(MP):SETERROR2.DOL2","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR2.DOL3",16777215,0,"$(P)$(MP):SETERROR2.DOL3")
#! Link("$(P)$(MP):SETERROR2.DOL3","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR2.DOL4",16777215,0,"$(P)$(MP):SETERROR2.DOL4")
#! Link("$(P)$(MP):SETERROR2.DOL4","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR2.DOL5",16777215,0,"$(P)$(MP):SETERROR2.DOL5")
#! Link("$(P)$(MP):SETERROR2.DOL5","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR2.DOL6",16777215,0,"$(P)$(MP):SETERROR2.DOL6")
#! Link("$(P)$(MP):SETERROR2.DOL6","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR2.DOL7",16777215,0,"$(P)$(MP):SETERROR2.DOL7")
#! Link("$(P)$(MP):SETERROR2.DOL7","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR2.DOL8",16777215,0,"$(P)$(MP):SETERROR2.DOL8")
#! Link("$(P)$(MP):SETERROR2.DOL8","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR2.LNK1",16777215,1,"$(P)$(MP):SETERROR2.LNK1")
#! Link("$(P)$(MP):SETERROR2.LNK1","$(P)$(MP):SETERROR2/LNK1")
#! Field("$(P)$(MP):SETERROR2.LNK2",16777215,1,"$(P)$(MP):SETERROR2.LNK2")
#! Link("$(P)$(MP):SETERROR2.LNK2","$(P)$(MP):SETERROR2/LNK2")
#! Field("$(P)$(MP):SETERROR2.LNK3",16777215,1,"$(P)$(MP):SETERROR2.LNK3")
#! Link("$(P)$(MP):SETERROR2.LNK3","$(P)$(MP):SETERROR2/LNK3")
#! Field("$(P)$(MP):SETERROR2.LNK4",16777215,1,"$(P)$(MP):SETERROR2.LNK4")
#! Link("$(P)$(MP):SETERROR2.LNK4","$(P)$(MP):SETERROR2/LNK4")
#! Field("$(P)$(MP):SETERROR2.LNK5",16777215,1,"$(P)$(MP):SETERROR2.LNK5")
#! Link("$(P)$(MP):SETERROR2.LNK5","$(P)$(MP):SETERROR2/LNK5")
#! Field("$(P)$(MP):SETERROR2.LNK6",16777215,1,"$(P)$(MP):SETERROR2.LNK6")
#! Link("$(P)$(MP):SETERROR2.LNK6","$(P)$(MP):SETERROR2/LNK6")
#! Field("$(P)$(MP):SETERROR2.LNK7",16777215,1,"$(P)$(MP):SETERROR2.LNK7")
#! Link("$(P)$(MP):SETERROR2.LNK7","$(P)$(MP):SETERROR2/LNK7")
#! Field("$(P)$(MP):SETERROR2.LNK8",16777215,1,"$(P)$(MP):SETERROR2.LNK8")
#! Link("$(P)$(MP):SETERROR2.LNK8","$(P)$(MP):SETERROR2/LNK8")
#! Connector("$(P)$(MP):SETERROR2/LNK8","$(P)$(MP):SELECT.FFSV",1920,2600,16777215,"",0)
#! Connector("$(P)$(MP):SETERROR2/LNK7","$(P)$(MP):SELECT.FTSV",1900,2580,16777215,"",0)
#! Connector("$(P)$(MP):SETERROR2/LNK6","$(P)$(MP):SELECT.TTSV",1880,2560,16777215,"",0)
#! Connector("$(P)$(MP):SETERROR2/LNK5","$(P)$(MP):SELECT.TVSV",1860,2540,16777215,"",0)
#! Connector("$(P)$(MP):SETERROR2/LNK4","$(P)$(MP):SELECT.ELSV",1840,2520,16777215,"",0)
#! Connector("$(P)$(MP):SETERROR2/LNK3","$(P)$(MP):SELECT.TESV",1820,2500,16777215,"",0)
#! Connector("$(P)$(MP):SETERROR2/LNK2","$(P)$(MP):SELECT.NISV",1800,2480,16777215,"",0)
#! Connector("$(P)$(MP):SETERROR2/LNK1","$(P)$(MP):SELECT.EISV",1780,2460,16777215,"",0)
#! Field("$(P)$(MP):SETERROR2.PACT",16777215,1,"$(P)$(MP):SETERROR2.PACT")
#! Record("$(P)$(MP):SELECT2",1320,2342,0,1,"$(P)$(MP):SELECT2")
#! Field("$(P)$(MP):SELECT2.INPA",16777215,1,"$(P)$(MP):SELECT2.INPA")
#! Link("$(P)$(MP):SELECT2.INPA","$(P)$(MP):SELECT2/INPA")
#! Field("$(P)$(MP):SELECT2.VAL",16777215,1,"$(P)$(MP):SELECT2.VAL")
#! Connector("$(P)$(MP):SELECT2/INPA","$(P)$(MP):SELECT.VAL",1760,2360,16777215,"",0)
#! Record("$(P)$(MP):SETERROR1",1320,1606,0,0,"$(P)$(MP):SETERROR1")
#! Field("$(P)$(MP):SETERROR1.DOL1",16777215,0,"$(P)$(MP):SETERROR1.DOL1")
#! Link("$(P)$(MP):SETERROR1.DOL1","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR1.DOL2",16777215,0,"$(P)$(MP):SETERROR1.DOL2")
#! Link("$(P)$(MP):SETERROR1.DOL2","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR1.DOL3",16777215,0,"$(P)$(MP):SETERROR1.DOL3")
#! Link("$(P)$(MP):SETERROR1.DOL3","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR1.DOL4",16777215,0,"$(P)$(MP):SETERROR1.DOL4")
#! Link("$(P)$(MP):SETERROR1.DOL4","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR1.DOL5",16777215,0,"$(P)$(MP):SETERROR1.DOL5")
#! Link("$(P)$(MP):SETERROR1.DOL5","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR1.DOL6",16777215,0,"$(P)$(MP):SETERROR1.DOL6")
#! Link("$(P)$(MP):SETERROR1.DOL6","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR1.DOL7",16777215,0,"$(P)$(MP):SETERROR1.DOL7")
#! Link("$(P)$(MP):SETERROR1.DOL7","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR1.DOL8",16777215,0,"$(P)$(MP):SETERROR1.DOL8")
#! Link("$(P)$(MP):SETERROR1.DOL8","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR1.LNK1",16777215,1,"$(P)$(MP):SETERROR1.LNK1")
#! Link("$(P)$(MP):SETERROR1.LNK1","$(P)$(MP):SETERROR/LNK1")
#! Field("$(P)$(MP):SETERROR1.LNK2",16777215,1,"$(P)$(MP):SETERROR1.LNK2")
#! Link("$(P)$(MP):SETERROR1.LNK2","$(P)$(MP):SETERROR/LNK2")
#! Field("$(P)$(MP):SETERROR1.LNK3",16777215,1,"$(P)$(MP):SETERROR1.LNK3")
#! Link("$(P)$(MP):SETERROR1.LNK3","$(P)$(MP):SETERROR/LNK3")
#! Field("$(P)$(MP):SETERROR1.LNK4",16777215,1,"$(P)$(MP):SETERROR1.LNK4")
#! Link("$(P)$(MP):SETERROR1.LNK4","$(P)$(MP):SETERROR/LNK4")
#! Field("$(P)$(MP):SETERROR1.LNK5",16777215,1,"$(P)$(MP):SETERROR1.LNK5")
#! Link("$(P)$(MP):SETERROR1.LNK5","$(P)$(MP):SETERROR/LNK5")
#! Field("$(P)$(MP):SETERROR1.LNK6",16777215,1,"$(P)$(MP):SETERROR1.LNK6")
#! Link("$(P)$(MP):SETERROR1.LNK6","$(P)$(MP):SETERROR/LNK6")
#! Field("$(P)$(MP):SETERROR1.LNK7",16777215,1,"$(P)$(MP):SETERROR1.LNK7")
#! Link("$(P)$(MP):SETERROR1.LNK7","$(P)$(MP):SELECT.SXSV")
#! Field("$(P)$(MP):SETERROR1.LNK8",16777215,1,"$(P)$(MP):SETERROR1.LNK8")
#! Link("$(P)$(MP):SETERROR1.LNK8","$(P)$(MP):SELECT.SVSV")
#! Field("$(P)$(MP):SETERROR1.SELL",16777215,1,"$(P)$(MP):SETERROR1.SELL")
#! Link("$(P)$(MP):SETERROR1.SELL","$(P)$(MP):SELECT1.VAL")
#! Field("$(P)$(MP):SETERROR1.FLNK",16777215,0,"$(P)$(MP):SETERROR1.FLNK")
#! Link("$(P)$(MP):SETERROR1.FLNK","$(P)$(MP):SETERROR2")
#! Connector("$(P)$(MP):SETERROR/LNK6","$(P)$(MP):SELECT.FVSV",1820,2210,16777215,"",0)
#! Connector("$(P)$(MP):SETERROR/LNK5","$(P)$(MP):SELECT.FRSV",1840,2190,16777215,"",0)
#! Connector("$(P)$(MP):SETERROR/LNK4","$(P)$(MP):SELECT.THSV",1860,2170,16777215,"",0)
#! Connector("$(P)$(MP):SETERROR/LNK3","$(P)$(MP):SELECT.TWSV",1880,2150,16777215,"",0)
#! Connector("$(P)$(MP):SETERROR/LNK2","$(P)$(MP):SELECT.ONSV",1900,2130,16777215,"",0)
#! Connector("$(P)$(MP):SETERROR/LNK1","$(P)$(MP):SELECT.ZRSV",1920,2110,16777215,"",0)
#! Field("$(P)$(MP):SETERROR1.PACT",16777215,1,"$(P)$(MP):SETERROR1.PACT")
#! Record("$(P)$(MP):TYPE",2860,2705,0,1,"$(P)$(MP):TYPE")
#! Record("$(P)$(MP):UPDATE",2860,2540,0,1,"$(P)$(MP):UPDATE")
#! Record("$(P)$(MP):INPOS",2580,2525,0,1,"$(P)$(MP):INPOS")
#! Field("$(P)$(MP):INPOS.VAL",16777215,1,"$(P)$(MP):INPOS.VAL")
#! Record("$(P)$(MP):STOP",3040,2542,0,1,"$(P)$(MP):STOP")
#! Record("$(P)$(MP):BUSY",2280,2083,0,1,"$(P)$(MP):BUSY")
#! Field("$(P)$(MP):BUSY.VAL",16777215,1,"$(P)$(MP):BUSY.VAL")
#! Record("$(P)$(MP):START",2240,1902,0,0,"$(P)$(MP):START")
#! Field("$(P)$(MP):START.LNK1",16777215,1,"$(P)$(MP):START.LNK1")
#! Link("$(P)$(MP):START.LNK1","$(P)$(MP):GATE")
#! Field("$(P)$(MP):START.LNK2",16777215,1,"$(P)$(MP):START.LNK2")
#! Link("$(P)$(MP):START.LNK2","$(P)$(MP):BUSY")
#! Field("$(P)$(MP):START.SDIS",16777215,0,"$(P)$(MP):START.SDIS")
#! Link("$(P)$(MP):START.SDIS","$(P)$(MP):ERRPROC.VAL")
#! Record("$(P)$(MP):DFANOUTA",3340,2128,0,0,"$(P)$(MP):DFANOUTA")
#! Field("$(P)$(MP):DFANOUTA.PROC",16777215,0,"$(P)$(MP):DFANOUTA.PROC")
#! Field("$(P)$(MP):DFANOUTA.DOL",16777215,0,"$(P)$(MP):DFANOUTA.DOL")
#! Link("$(P)$(MP):DFANOUTA.DOL","$(P)$(MP):VALUE.VAL")
#! Box(Box0,2220,2460,2820,2820,1,65280,null)
#! Box(Box4,2460,1900,2980,2340,1,16711680,null)
#! Box(Box3,760,1600,1940,2800,1,65280,null)
#! Box(Box2,3040,2000,3260,2240,1,255,null)
#! Box(Box1,1960,1680,3520,2440,1,16711680,null)
#! TextBox(TB0,2500,2460,2800,2500,0,"Dialog",12,1,16777215,"Combination of individual DMOV and INPOS",null)
#! TextBox(TB4,2460,1900,2980,2000,0,"Dialog",12,1,16777215,"These records stop an error from the positioner template causing an endless loop.\nErrors are propagated into the mbbo :SELECT via SETERROR1 using PP links \nwhich can cause the demand value to be re-sent to the positioner template.\nThis calcout prevents the position being re-sent if it is the same as the last \ndemand UNLESS the positioner is stationary and out of position.",null)
#! TextBox(TB3,1020,1640,1200,1680,0,"Dialog",12,1,16777215,"Calculation of error state",null)
#! TextBox(TB2,3060,2000,3260,2020,0,"Dialog",12,1,16777215,"Record for testing of DMOV.",null)
#! TextBox(TB1,2160,1700,2660,1740,0,"Dialog",12,1,16777215,"Take user selection and fanout to start motion and the selection to positioners\nThe positioners set the output links from the dfanouts themselves",null)
#! Record("$(P)$(MP):ERRPROC",1960,1482,0,1,"$(P)$(MP):ERRPROC")
#! Field("$(P)$(MP):ERRPROC.INPA",16777215,0,"$(P)$(MP):ERRPROC.INPA")
#! Link("$(P)$(MP):ERRPROC.INPA","$(P)$(MP):SETERROR1.PACT")
#! Field("$(P)$(MP):ERRPROC.INPB",16777215,0,"$(P)$(MP):ERRPROC.INPB")
#! Link("$(P)$(MP):ERRPROC.INPB","$(P)$(MP):SETERROR2.PACT")
#! Field("$(P)$(MP):ERRPROC.VAL",16777215,1,"$(P)$(MP):ERRPROC.VAL")
