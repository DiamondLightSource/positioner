#! Generated by VisualDCT v2.5
#! DBDSTART
#! DBD("../../dbd/positioner.dbd")
#! DBDEND


# List of names for selection by user.
# Severity is returned via DISA.
# DISV set to 2 to stop disabling.
record(mbbo, "$(P)$(MP):SELECT") {
  field(DESC, "$(DESC)")
  field(SCAN, "Passive")
  field(DTYP, "Soft Channel")
  field(ZRST, "$(STRA)")
  field(ONST, "$(STRB)")
  field(TWST, "$(STRC)")
  field(THST, "$(STRD)")
  field(FRST, "$(STRE)")
  field(FVST, "$(STRF)")
  field(SXST, "$(STRG)")
  field(PINI, "YES")
  field(FLNK, "$(P)$(MP):GATE PP MS")
  field(SVST, "$(STRH)")
  field(EIST, "$(STRI)")
  field(NIST, "$(STRJ)")
  field(TEST, "$(STRK)")
  field(ELST, "$(STRL)")
  field(DISV, "2")
  field(VAL, "0")
}

# Fans selected position number to each separate controller
# The outlinks are filled by the positioners.
record(dfanout, "$(P)$(MP):DFANOUT") {
  field(DESC, "Fanout selection")
  field(SELM, "All")
  field(DOL, "$(P)$(MP):VALUE.VAL")
  field(OMSL, "closed_loop")
}

# Open a gate on each positioner.
# The outlinks are filled by the positioners.
record(dfanout, "$(P)$(MP):SFANOUT") {
  field(DESC, "Fanout start motion")
  field(SELM, "All")
  field(VAL, "0")
}

# On selection make sure all gates are open before motion
record(fanout, "$(P)$(MP):FANOUT") {
  field(LNK1, "$(P)$(MP):SFANOUT PP MS")
  field(LNK2, "$(P)$(MP):DFANOUT PP MS")
  field(DESC, "Fanout of processing")
}

# Combined done moving indicator.
# Value from AND of all 8 possible inputs.
# The fixed values of 1 are overwritten by each positioner.
record(calcout, "$(P)$(MP):DMOV") {
  field(CALC, "A&B&C&D&E&F&G&H")
  field(A, "1")
  field(B, "1")
  field(C, "1")
  field(D, "1")
  field(E, "1")
  field(F, "1")
  field(G, "1")
  field(H, "1")
  field(DESC, "Positioner done moving")
}

# Test opening of gates by waiting between open gate and move commands
# To use this change the FLNK of VALUE to point to this.
record(seq, "$(P)$(MP):FANOUT2") {
  field(DESC, "Wait before sending val")
  field(SCAN, "Passive")
  field(SELM, "All")
  field(DOL1, "0")
  field(LNK1, "$(P)$(MP):SFANOUT.PROC PP MS")
  field(DLY2, "5")
  field(LNK2, "$(P)$(MP):DFANOUT.PROC PP MS")
}

record(transform, "$(P)$(MP):ERROR") {
  field(DESC, "Errors from positioners")
  field(FLNK, "$(P)$(MP):SETERROR1 PP MS")
  field(CLCI, "MAX(MAX(A,B),MAX(C,D))")
  field(CLCJ, "MAX(MAX(E,F),MAX(G,H))")
  field(CLCK, "MAX(I,J)")
  field(INPA, "0")
  field(INPB, "0")
  field(INPC, "0")
  field(INPD, "0")
  field(INPE, "0")
  field(INPF, "0")
  field(INPG, "0")
  field(INPH, "0")
}

# Check if value has changed from previous call.
# This stops infinite loops when passing MS back
record(calcout, "$(P)$(MP):GATE") {
  field(DESC, "Stop repeated output")
  field(DTYP, "Soft Channel")
  field(CALC, "A = B")
  field(INPA, "$(P)$(MP):SELECT NPP MS")
  field(INPB, "$(P)$(MP):VALUE")
  field(OUT, "$(P)$(MP):VALUE PP MS")
  field(OOPT, "When Zero")
  field(DOPT, "Use OCAL")
  field(OCAL, "A")
}

# Stores last selected value. This enables the gate record to check if the value has changed.
# Initially set to -1 to ensure first value is selected correctly.
record(longout, "$(P)$(MP):VALUE") {
  field(DESC, "Value selected")
  field(DTYP, "Soft Channel")
  field(FLNK, "$(P)$(MP):FANOUT")
  field(VAL, "-1")
}

# Add 1 to selection to allow 1st seq to work
record(calc, "$(P)$(MP):SELECT1") {
  field(DESC, "Selection+1")
  field(CALC, "A+1")
  field(INPA, "$(P)$(MP):SELECT.VAL")
}

# Sets error severities for 2nd 6 positions
record(seq, "$(P)$(MP):SETERROR2") {
  field(DESC, "Sets errors in SELECT")
  field(SELM, "Specified")
  field(SELL, "$(P)$(MP):SELECT2.VAL PP")
  field(DOL1, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK1, "$(P)$(MP):SELECT.SXSV PP MS")
  field(DOL2, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK2, "$(P)$(MP):SELECT.SVSV PP MS")
  field(DOL3, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK3, "$(P)$(MP):SELECT.EISV PP MS")
  field(DOL4, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK4, "$(P)$(MP):SELECT.NISV PP MS")
  field(DOL5, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK5, "$(P)$(MP):SELECT.TESV PP MS")
  field(DOL6, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK6, "$(P)$(MP):SELECT.ELSV PP MS")
}

# Select the correct link from the second sequence
record(calc, "$(P)$(MP):SELECT2") {
  field(DESC, "Selection-5")
  field(CALC, "A-5")
  field(INPA, "$(P)$(MP):SELECT.VAL")
}

# Sets error severities for 1st 6 positions
record(seq, "$(P)$(MP):SETERROR1") {
  field(DESC, "Sets errors in SELECT")
  field(FLNK, "$(P)$(MP):SETERROR2")
  field(SELM, "Specified")
  field(SELL, "$(P)$(MP):SELECT1 PP")
  field(DOL1, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK1, "$(P)$(MP):SELECT.ZRSV PP MS")
  field(DOL2, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK2, "$(P)$(MP):SELECT.ONSV PP MS")
  field(DOL3, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK3, "$(P)$(MP):SELECT.TWSV PP MS")
  field(DOL4, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK4, "$(P)$(MP):SELECT.THSV PP MS")
  field(DOL5, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK5, "$(P)$(MP):SELECT.FRSV PP MS")
  field(DOL6, "$(P)$(MP):ERROR.K NPP MS")
  field(LNK6, "$(P)$(MP):SELECT.FVSV PP MS")
}

# Stores types of underlying positioners
# 0 = Undefined
# 1 = Normal
# 2 = Motor
record(calcout, "$(P)$(MP):TYPE") {
  field(CALC, "A&B&C&D&E&F&G&H")
  field(A, "0")
  field(B, "0")
  field(C, "0")
  field(D, "0")
  field(E, "0")
  field(F, "0")
  field(G, "0")
  field(H, "0")
  field(DESC, "Types of positioner")
}

# Record to allow EDM to process changes of strings.
record(bo, "$(P)$(MP):UPDATE") {
  field(DESC, "Dummy for EDM")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(VAL, "1")
  field(ZNAM, "Updating")
  field(ONAM, "Normal")
}

# Combined in position indicator.
# Value from AND of all 8 possible inputs.
# The fixed values of 1 are overwritten by each positioner.
record(calcout, "$(P)$(MP):INPOS") {
  field(CALC, "A&B&C&D&E&F&G&H")
  field(A, "1")
  field(B, "1")
  field(C, "1")
  field(D, "1")
  field(E, "1")
  field(F, "1")
  field(G, "1")
  field(H, "1")
  field(DESC, "Combined in position monitor")
}

record(dfanout, "$(P)$(MP):STOP") {
  field(DESC, "Stop all motors")
  field(VAL, "1")
  field(SELM, "All")
}

#! Further lines contain data used by VisualDCT
#! View(1019,981,0.6)
#! Record("$(P)$(MP):SELECT",1980,1752,0,0,"$(P)$(MP):SELECT")
#! Field("$(P)$(MP):SELECT.FLNK",16777215,1,"$(P)$(MP):SELECT.FLNK")
#! Link("$(P)$(MP):SELECT.FLNK","$(P)$(MP):GATE")
#! Field("$(P)$(MP):SELECT.ZRSV",16777215,0,"$(P)$(MP):SELECT.ZRSV")
#! Field("$(P)$(MP):SELECT.ONSV",16777215,0,"$(P)$(MP):SELECT.ONSV")
#! Field("$(P)$(MP):SELECT.TWSV",16777215,0,"$(P)$(MP):SELECT.TWSV")
#! Field("$(P)$(MP):SELECT.THSV",16777215,0,"$(P)$(MP):SELECT.THSV")
#! Field("$(P)$(MP):SELECT.FRSV",16777215,0,"$(P)$(MP):SELECT.FRSV")
#! Field("$(P)$(MP):SELECT.FVSV",16777215,0,"$(P)$(MP):SELECT.FVSV")
#! Field("$(P)$(MP):SELECT.VAL",16777215,1,"$(P)$(MP):SELECT.VAL")
#! Field("$(P)$(MP):SELECT.SXSV",16777215,0,"$(P)$(MP):SELECT.SXSV")
#! Field("$(P)$(MP):SELECT.SVSV",16777215,0,"$(P)$(MP):SELECT.SVSV")
#! Field("$(P)$(MP):SELECT.EISV",16777215,0,"$(P)$(MP):SELECT.EISV")
#! Field("$(P)$(MP):SELECT.NISV",16777215,0,"$(P)$(MP):SELECT.NISV")
#! Field("$(P)$(MP):SELECT.TESV",16777215,0,"$(P)$(MP):SELECT.TESV")
#! Field("$(P)$(MP):SELECT.ELSV",16777215,0,"$(P)$(MP):SELECT.ELSV")
#! Record("$(P)$(MP):DFANOUT",3040,2127,0,0,"$(P)$(MP):DFANOUT")
#! Field("$(P)$(MP):DFANOUT.PROC",16777215,0,"$(P)$(MP):DFANOUT.PROC")
#! Field("$(P)$(MP):DFANOUT.DOL",16777215,0,"$(P)$(MP):DFANOUT.DOL")
#! Link("$(P)$(MP):DFANOUT.DOL","$(P)$(MP):VALUE.VAL")
#! Record("$(P)$(MP):SFANOUT",3040,1842,0,0,"$(P)$(MP):SFANOUT")
#! Field("$(P)$(MP):SFANOUT.PROC",16777215,0,"$(P)$(MP):SFANOUT.PROC")
#! Record("$(P)$(MP):FANOUT",2760,1782,0,0,"$(P)$(MP):FANOUT")
#! Field("$(P)$(MP):FANOUT.LNK1",16777215,1,"$(P)$(MP):FANOUT.LNK1")
#! Link("$(P)$(MP):FANOUT.LNK1","$(P)$(MP):SFANOUT")
#! Field("$(P)$(MP):FANOUT.LNK2",16777215,1,"$(P)$(MP):FANOUT.LNK2")
#! Link("$(P)$(MP):FANOUT.LNK2","$(P)$(MP):DFANOUT")
#! Record("$(P)$(MP):DMOV",2440,2460,0,0,"$(P)$(MP):DMOV")
#! Record("$(P)$(MP):FANOUT2",2760,2024,0,0,"$(P)$(MP):FANOUT2")
#! Field("$(P)$(MP):FANOUT2.LNK1",16777215,1,"$(P)$(MP):FANOUT2.LNK1")
#! Link("$(P)$(MP):FANOUT2.LNK1","$(P)$(MP):SFANOUT.PROC")
#! Field("$(P)$(MP):FANOUT2.LNK2",16777215,1,"$(P)$(MP):FANOUT2.LNK2")
#! Link("$(P)$(MP):FANOUT2.LNK2","$(P)$(MP):DFANOUT.PROC")
#! Record("$(P)$(MP):ERROR",780,1697,0,1,"$(P)$(MP):ERROR")
#! Field("$(P)$(MP):ERROR.FLNK",16777215,1,"$(P)$(MP):ERROR.FLNK")
#! Link("$(P)$(MP):ERROR.FLNK","$(P)$(MP):ERROR/FLNK")
#! Field("$(P)$(MP):ERROR.K",16777215,1,"$(P)$(MP):ERROR.K")
#! Connector("$(P)$(MP):ERROR/FLNK","$(P)$(MP):SETERROR1",1280,1893,16777215,"",0)
#! Record("$(P)$(MP):GATE",2240,1995,0,0,"$(P)$(MP):GATE")
#! Field("$(P)$(MP):GATE.INPA",16777215,0,"$(P)$(MP):GATE.INPA")
#! Link("$(P)$(MP):GATE.INPA","$(P)$(MP):SELECT.VAL")
#! Field("$(P)$(MP):GATE.INPB",16777215,1,"$(P)$(MP):GATE.INPB")
#! Link("$(P)$(MP):GATE.INPB","$(P)$(MP):VALUE.VAL")
#! Field("$(P)$(MP):GATE.OUT",16777215,1,"$(P)$(MP):GATE.OUT")
#! Link("$(P)$(MP):GATE.OUT","$(P)$(MP):VALUE.VAL")
#! Record("$(P)$(MP):VALUE",2500,2087,0,1,"$(P)$(MP):VALUE")
#! Field("$(P)$(MP):VALUE.FLNK",16777215,1,"$(P)$(MP):VALUE.FLNK")
#! Link("$(P)$(MP):VALUE.FLNK","$(P)$(MP):FANOUT")
#! Field("$(P)$(MP):VALUE.VAL",16777215,1,"$(P)$(MP):VALUE.VAL")
#! Record("$(P)$(MP):SELECT1",1580,2222,0,1,"$(P)$(MP):SELECT1")
#! Field("$(P)$(MP):SELECT1.VAL",16777215,0,"$(P)$(MP):SELECT1.VAL")
#! Field("$(P)$(MP):SELECT1.INPA",16777215,1,"$(P)$(MP):SELECT1.INPA")
#! Link("$(P)$(MP):SELECT1.INPA","$(P)$(MP):SELECT1/INPA")
#! Connector("$(P)$(MP):SELECT1/INPA","$(P)$(MP):SELECT.VAL",1800,2290,16777215,"",0)
#! Record("$(P)$(MP):SETERROR2",1060,2109,0,1,"$(P)$(MP):SETERROR2")
#! Field("$(P)$(MP):SETERROR2.SELL",16777215,1,"$(P)$(MP):SETERROR2.SELL")
#! Link("$(P)$(MP):SETERROR2.SELL","$(P)$(MP):SELECT2.VAL")
#! Field("$(P)$(MP):SETERROR2.DOL1",16777215,0,"$(P)$(MP):SETERROR2.DOL1")
#! Link("$(P)$(MP):SETERROR2.DOL1","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR2.DOL2",16777215,0,"$(P)$(MP):SETERROR2.DOL2")
#! Link("$(P)$(MP):SETERROR2.DOL2","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR2.DOL3",16777215,0,"$(P)$(MP):SETERROR2.DOL3")
#! Link("$(P)$(MP):SETERROR2.DOL3","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR2.DOL4",16777215,0,"$(P)$(MP):SETERROR2.DOL4")
#! Link("$(P)$(MP):SETERROR2.DOL4","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR2.DOL5",16777215,0,"$(P)$(MP):SETERROR2.DOL5")
#! Link("$(P)$(MP):SETERROR2.DOL5","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR2.DOL6",16777215,0,"$(P)$(MP):SETERROR2.DOL6")
#! Link("$(P)$(MP):SETERROR2.DOL6","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR2.LNK1",16777215,1,"$(P)$(MP):SETERROR2.LNK1")
#! Link("$(P)$(MP):SETERROR2.LNK1","$(P)$(MP):SETERROR2/LNK1")
#! Field("$(P)$(MP):SETERROR2.LNK2",16777215,1,"$(P)$(MP):SETERROR2.LNK2")
#! Link("$(P)$(MP):SETERROR2.LNK2","$(P)$(MP):SETERROR2/LNK2")
#! Field("$(P)$(MP):SETERROR2.LNK3",16777215,1,"$(P)$(MP):SETERROR2.LNK3")
#! Link("$(P)$(MP):SETERROR2.LNK3","$(P)$(MP):SETERROR2/LNK3")
#! Field("$(P)$(MP):SETERROR2.LNK4",16777215,1,"$(P)$(MP):SETERROR2.LNK4")
#! Link("$(P)$(MP):SETERROR2.LNK4","$(P)$(MP):SETERROR2/LNK4")
#! Field("$(P)$(MP):SETERROR2.LNK5",16777215,1,"$(P)$(MP):SETERROR2.LNK5")
#! Link("$(P)$(MP):SETERROR2.LNK5","$(P)$(MP):SETERROR2/LNK5")
#! Field("$(P)$(MP):SETERROR2.LNK6",16777215,1,"$(P)$(MP):SETERROR2.LNK6")
#! Link("$(P)$(MP):SETERROR2.LNK6","$(P)$(MP):SETERROR2/LNK6")
#! Connector("$(P)$(MP):SETERROR2/LNK6","$(P)$(MP):SELECT.ELSV",1920,2490,16777215,"",0)
#! Connector("$(P)$(MP):SETERROR2/LNK5","$(P)$(MP):SELECT.TESV",1900,2470,16777215,"",0)
#! Connector("$(P)$(MP):SETERROR2/LNK4","$(P)$(MP):SELECT.NISV",1880,2450,16777215,"",0)
#! Connector("$(P)$(MP):SETERROR2/LNK3","$(P)$(MP):SELECT.EISV",1860,2430,16777215,"",0)
#! Connector("$(P)$(MP):SETERROR2/LNK2","$(P)$(MP):SELECT.SVSV",1840,2410,16777215,"",0)
#! Connector("$(P)$(MP):SETERROR2/LNK1","$(P)$(MP):SELECT.SXSV",1820,2390,16777215,"",0)
#! Record("$(P)$(MP):SELECT2",1320,2282,0,1,"$(P)$(MP):SELECT2")
#! Field("$(P)$(MP):SELECT2.INPA",16777215,1,"$(P)$(MP):SELECT2.INPA")
#! Link("$(P)$(MP):SELECT2.INPA","$(P)$(MP):SELECT2/INPA")
#! Field("$(P)$(MP):SELECT2.VAL",16777215,0,"$(P)$(MP):SELECT2.VAL")
#! Connector("$(P)$(MP):SELECT2/INPA","$(P)$(MP):SELECT.VAL",1800,2310,16777215,"",0)
#! Record("$(P)$(MP):SETERROR1",1320,1694,0,0,"$(P)$(MP):SETERROR1")
#! Field("$(P)$(MP):SETERROR1.DOL1",16777215,0,"$(P)$(MP):SETERROR1.DOL1")
#! Link("$(P)$(MP):SETERROR1.DOL1","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR1.DOL2",16777215,0,"$(P)$(MP):SETERROR1.DOL2")
#! Link("$(P)$(MP):SETERROR1.DOL2","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR1.DOL3",16777215,0,"$(P)$(MP):SETERROR1.DOL3")
#! Link("$(P)$(MP):SETERROR1.DOL3","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR1.DOL4",16777215,0,"$(P)$(MP):SETERROR1.DOL4")
#! Link("$(P)$(MP):SETERROR1.DOL4","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR1.DOL5",16777215,0,"$(P)$(MP):SETERROR1.DOL5")
#! Link("$(P)$(MP):SETERROR1.DOL5","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR1.DOL6",16777215,0,"$(P)$(MP):SETERROR1.DOL6")
#! Link("$(P)$(MP):SETERROR1.DOL6","$(P)$(MP):ERROR.K")
#! Field("$(P)$(MP):SETERROR1.LNK1",16777215,1,"$(P)$(MP):SETERROR1.LNK1")
#! Link("$(P)$(MP):SETERROR1.LNK1","$(P)$(MP):SETERROR/LNK1")
#! Field("$(P)$(MP):SETERROR1.LNK2",16777215,1,"$(P)$(MP):SETERROR1.LNK2")
#! Link("$(P)$(MP):SETERROR1.LNK2","$(P)$(MP):SETERROR/LNK2")
#! Field("$(P)$(MP):SETERROR1.LNK3",16777215,1,"$(P)$(MP):SETERROR1.LNK3")
#! Link("$(P)$(MP):SETERROR1.LNK3","$(P)$(MP):SETERROR/LNK3")
#! Field("$(P)$(MP):SETERROR1.LNK4",16777215,1,"$(P)$(MP):SETERROR1.LNK4")
#! Link("$(P)$(MP):SETERROR1.LNK4","$(P)$(MP):SETERROR/LNK4")
#! Field("$(P)$(MP):SETERROR1.LNK5",16777215,1,"$(P)$(MP):SETERROR1.LNK5")
#! Link("$(P)$(MP):SETERROR1.LNK5","$(P)$(MP):SETERROR/LNK5")
#! Field("$(P)$(MP):SETERROR1.LNK6",16777215,1,"$(P)$(MP):SETERROR1.LNK6")
#! Link("$(P)$(MP):SETERROR1.LNK6","$(P)$(MP):SETERROR/LNK6")
#! Field("$(P)$(MP):SETERROR1.SELL",16777215,1,"$(P)$(MP):SETERROR1.SELL")
#! Link("$(P)$(MP):SETERROR1.SELL","$(P)$(MP):SELECT1.VAL")
#! Field("$(P)$(MP):SETERROR1.FLNK",16777215,0,"$(P)$(MP):SETERROR1.FLNK")
#! Link("$(P)$(MP):SETERROR1.FLNK","$(P)$(MP):SETERROR2")
#! Connector("$(P)$(MP):SETERROR/LNK6","$(P)$(MP):SELECT.FVSV",1820,2210,16777215,"",0)
#! Connector("$(P)$(MP):SETERROR/LNK5","$(P)$(MP):SELECT.FRSV",1840,2190,16777215,"",0)
#! Connector("$(P)$(MP):SETERROR/LNK4","$(P)$(MP):SELECT.THSV",1860,2170,16777215,"",0)
#! Connector("$(P)$(MP):SETERROR/LNK3","$(P)$(MP):SELECT.TWSV",1880,2150,16777215,"",0)
#! Connector("$(P)$(MP):SETERROR/LNK2","$(P)$(MP):SELECT.ONSV",1900,2130,16777215,"",0)
#! Connector("$(P)$(MP):SETERROR/LNK1","$(P)$(MP):SELECT.ZRSV",1920,2110,16777215,"",0)
#! Record("$(P)$(MP):TYPE",2680,2460,0,1,"$(P)$(MP):TYPE")
#! Record("$(P)$(MP):UPDATE",2860,2499,0,1,"$(P)$(MP):UPDATE")
#! Record("$(P)$(MP):INPOS",2260,2460,0,1,"$(P)$(MP):INPOS")
#! Box(Box0,2240,2400,2620,2680,1,65280,null)
#! Box(Box4,2160,1940,2680,2260,1,16711680,null)
#! Box(Box3,760,1680,1940,2680,1,65280,null)
#! Box(Box2,2740,2000,2960,2240,1,255,null)
#! Box(Box1,1960,1680,3220,2380,1,16711680,null)
#! TextBox(TB0,2280,2420,2580,2460,0,"Dialog",12,1,16777215,"Combination of individual DMOV and INPOS",null)
#! TextBox(TB4,2280,1960,2680,1980,0,"Dialog",12,1,16777215,"These records stop the maximise severity causing an endless loop",null)
#! TextBox(TB3,1020,1700,1200,1740,0,"Dialog",12,1,16777215,"Calculation of error state",null)
#! TextBox(TB2,2760,2000,2960,2020,0,"Dialog",12,1,16777215,"Record for testing of DMOV.",null)
#! TextBox(TB1,2160,1700,2660,1740,0,"Dialog",12,1,16777215,"Take user selection and fanout to start motion and the selection to positioners\nThe positioners set the output links from the dfanouts themselves",null)
#! Record("$(P)$(MP):STOP",3080,2502,0,1,"$(P)$(MP):STOP")
